// <auto-generated />
using System;
using Events.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250512152459_SeedCalendarEvents")]
    partial class SeedCalendarEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Events.Api.Models.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CalenderEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Daily sync with the team",
                            End = new DateTime(2025, 5, 13, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            IsAllDay = false,
                            Location = "Zoom",
                            Start = new DateTime(2025, 5, 13, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Team Standup"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Initial project kickoff meeting",
                            End = new DateTime(2025, 5, 14, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            IsAllDay = false,
                            Location = "Boardroom 1",
                            Start = new DateTime(2025, 5, 14, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project Kickoff"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
